{"version":3,"sources":["generators/index.js","generators/setChordIntervals.js","SuggestChord.js","Fretboard.js","App.js","serviceWorker.js","index.js"],"names":["fretIntervals","generateFretboard","R","generateStringsFromDeepestNote","flatNote","stringCount","acc","transpose","transposeFrom","enharmonic","RA","fret","fretIndex","note","selectedChordInterval","getInterval","tonic","chordNotes","pc","interval","dist","distance","fretboard","chord","intervals","map","console","log","chordSuggestions","entries","chordType","name","filter","getSuggestions","value","inputValue","trim","toLowerCase","suggestion","valueIndex","indexOf","sort","a","b","getSuggestionValue","renderSuggestion","SuggestChord","onChordChange","useState","setValue","suggestions","setSuggestions","inputProps","placeholder","onChange","event","newValue","method","includes","onSuggestionsFetchRequested","onSuggestionsClearRequested","TonalInput","initialValue","label","getTonal","setTonal","tonalType","validTonal","tonalError","setTonalError","setInputValue","htmlFor","type","e","wantedTonalValue","handleValueChange","target","Fret","onClick","Fretboard","setFretboard","selectedChord","setSelectedChord","action","simplify","noteValue","className","guitarString","guitarStringIndex","key","setChordIntervals","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13e0b292.chunk.js","sourcesContent":["import * as R from 'ramda'\nimport * as RA from 'ramda-adjunct'\nimport { enharmonic, transposeFrom } from '@tonaljs/note'\nimport { transpose, note } from '@tonaljs/tonal'\n\nconst fretIntervals = [\n  'P1',\n  'm2',\n  'M2',\n  'm3',\n  'M3',\n  'P4',\n  'd5',\n  'P5',\n  'm6',\n  'M6',\n  'm7',\n  'M7',\n  'P8'\n]\n\nexport const generateString = flatNote =>\n  R.map(R.pipe(transposeFrom(flatNote), enharmonic), fretIntervals)\n\nexport const generateStringsFromDeepestNote = (\n  flatNote,\n  stringCount = 6,\n  acc = []\n) =>\n  stringCount > 0\n    ? generateStringsFromDeepestNote(\n        transpose(flatNote, 'P5'),\n        stringCount - 1,\n        [flatNote, ...acc]\n      )\n    : acc\n\nexport const generateFretboard = R.memoizeWith(\n  R.identity,\n  R.pipe(\n    generateStringsFromDeepestNote,\n    R.map(R.pipe(generateString)),\n    R.flatten,\n    RA.mapIndexed((fret, fretIndex) => ({\n      note: note(fret),\n      fretIndex,\n      selectedChordInterval: ''\n    }))\n  )\n)\n","import * as R from 'ramda'\nimport { note, distance } from '@tonaljs/tonal'\nimport { transposeFrom, enharmonic } from '@tonaljs/note'\n\nexport const getInterval = (fret, tonic, chordNotes) => {\n  const { pc, interval } = R.head(chordNotes)\n  const dist = distance(pc, fret.note.pc)\n  return dist === '1P' || dist === '0A' || dist === '2d'\n    ? interval\n    : R.length(R.tail(chordNotes))\n    ? getInterval(fret, tonic, R.tail(chordNotes))\n    : ''\n}\n\nexport default (fretboard, tonic, chord) => {\n  const chordNotes = chord.intervals.map(interval => ({\n    ...R.pipe(transposeFrom(tonic), enharmonic, note)(interval),\n    interval\n  }))\n  console.log(chord)\n  return R.map(fret => ({\n    ...fret,\n    selectedChordInterval: getInterval(fret, tonic, chordNotes)\n  }))(fretboard)\n}\n","import React, { useState } from 'react'\nimport { entries } from '@tonaljs/chord-dictionary'\nimport Autosuggest from 'react-autosuggest'\n\nexport const chordSuggestions = entries()\n  .map(chordType => chordType.name)\n  .filter(chordType => chordType)\n\nexport const getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase()\n  return chordSuggestions\n    .map(suggestion => ({\n      name: suggestion,\n      valueIndex: suggestion.indexOf(inputValue)\n    }))\n    .filter(({ valueIndex }) => valueIndex >= 0)\n    .sort((a, b) => a.valueIndex - b.valueIndex)\n    .map(({ name }) => name)\n}\n\nconst getSuggestionValue = suggestion => suggestion\n\nconst renderSuggestion = suggestion => <div>{suggestion}</div>\n\nfunction SuggestChord({ onChordChange }) {\n  const [value, setValue] = useState('')\n  const [suggestions, setSuggestions] = useState(chordSuggestions)\n  const onChange = (event, { newValue, method }) => {\n    setValue(newValue)\n    console.log(method)\n    switch (method) {\n      case 'type':\n        break\n      default:\n        if (chordSuggestions.includes(newValue)) {\n          onChordChange(newValue)\n        }\n    }\n  }\n  const onSuggestionsFetchRequested = ({ value }) =>\n    setSuggestions(getSuggestions(value))\n  const onSuggestionsClearRequested = () => setSuggestions(chordSuggestions)\n  const inputProps = {\n    placeholder: 'Choose a chord',\n    value,\n    onChange\n  }\n\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={onSuggestionsClearRequested}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n    />\n  )\n}\n\nexport default SuggestChord\n","import React, { Fragment, useState } from 'react'\nimport * as R from 'ramda'\nimport { simplify } from '@tonaljs/note'\nimport { chordType } from '@tonaljs/chord-dictionary'\nimport { generateFretboard } from './generators'\nimport setChordIntervals from './generators/setChordIntervals'\n\nimport './Fretboard.css'\nimport SuggestChord from './SuggestChord'\n\nfunction TonalInput({\n  initialValue,\n  label,\n  getTonal,\n  setTonal,\n  tonalType,\n  validTonal\n}) {\n  const [tonalError, setTonalError] = useState(false)\n  const [inputValue, setInputValue] = useState(initialValue)\n  const handleValueChange = value => {\n    const wantedTonalValue = getTonal(value)\n    if (validTonal(wantedTonalValue)) {\n      setTonalError(false)\n      setTonal(wantedTonalValue)\n    } else {\n      setTonalError(true)\n    }\n    setInputValue(value)\n  }\n\n  return (\n    <label htmlFor={label}>\n      {`${label} : `}\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={e => handleValueChange(e.target.value)}\n      />\n      {tonalError && <span>{`not a valid ${tonalType}`}</span>}\n    </label>\n  )\n}\n\nfunction Fret({ fretIndex, note, selectedChordInterval, onClick }) {\n  return (\n    <li onClick={onClick}>\n      <aside>{fretIndex}</aside>\n      <article>{note.name}</article>\n      <div>{selectedChordInterval}</div>\n    </li>\n  )\n}\n\nfunction Fretboard() {\n  const initialDeepestNote = 'F1'\n  const [fretboard, setFretboard] = useState(\n    generateFretboard(initialDeepestNote)\n  )\n  const [selectedChord, setSelectedChord] = useState('')\n  return (\n    <Fragment>\n      <form action=\"\">\n        <TonalInput\n          initialValue={initialDeepestNote}\n          label=\"Deepest note\"\n          getTonal={simplify}\n          setTonal={noteValue => setFretboard(generateFretboard(noteValue))}\n          tonalType=\"note\"\n          validTonal={noteValue => noteValue !== ''}\n        />\n        <SuggestChord onChordChange={value => setSelectedChord(value)} />{' '}\n        {selectedChord}\n      </form>\n      <main className=\"Fretboard\">\n        <ol>\n          {R.splitEvery(13, fretboard).map(\n            (guitarString, guitarStringIndex) => (\n              <li key={guitarStringIndex}>\n                <ol>\n                  {guitarString.map(fret => (\n                    <Fret\n                      {...fret}\n                      key={fret.fretIndex}\n                      onClick={() => {\n                        setFretboard(\n                          setChordIntervals(\n                            fretboard,\n                            fret.note,\n                            chordType(selectedChord)\n                          )\n                        )\n                      }}\n                    />\n                  ))}\n                </ol>\n              </li>\n            )\n          )}\n        </ol>\n      </main>\n    </Fragment>\n  )\n}\n\nexport default Fretboard\n","import React from 'react'\nimport './App.css'\nimport Fretboard from './Fretboard'\n\nfunction App() {\n  return (\n    <div>\n      <Fretboard />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}