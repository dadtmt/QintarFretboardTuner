{"version":3,"sources":["generators/index.js","Fretboard.js","App.js","serviceWorker.js","index.js"],"names":["fretIntervals","generateString","flatNote","R","transposeFrom","enharmonic","generateFretboard","generateStringsFromDeepestNote","stringCount","acc","transpose","frets","TonalInput","initialValue","label","getter","setter","tonalType","validate","useState","tonalInputError","setTonalInputError","tonalValue","setTonalValue","htmlFor","type","value","onChange","e","wantedTonalValue","handleValueChange","target","Fretboard","fretboard","setFretboard","selectedChord","setSelectedChord","action","simplify","noteValue","chord","chordValue","name","empty","map","guitarString","key","fret","className","classNames","selected","notes","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAIMA,EAAgB,CACpB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGWC,EAAiB,SAAAC,GAAQ,OACpCC,IAAMA,IAAOC,YAAcF,GAAWG,KAAaL,IAexCM,EAAoBH,IAC/BA,IACAA,KAf4C,SAAjCI,EACXL,GAD4C,IAE5CM,EAF4C,uDAE9B,EACdC,EAH4C,uDAGtC,GAHsC,OAK5CD,EAAc,EACVD,EACEG,YAAUR,EAAU,MACpBM,EAAc,EAFc,CAG3BN,GAH2B,mBAGdO,KAEhBA,IAMFN,KAAM,SAAAD,GAAQ,MAAK,CACjBA,WACAS,MAAOV,EAAeC,S,MClC5B,SAASU,EAAT,GAOI,IANFC,EAMC,EANDA,aACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,OACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,UACAC,EACC,EADDA,SACC,EAC6CC,oBAAS,GADtD,mBACMC,EADN,KACuBC,EADvB,OAEmCF,mBAASN,GAF5C,mBAEMS,EAFN,KAEkBC,EAFlB,KAcD,OACE,2BAAOC,QAASV,GAAhB,UACMA,EADN,OAEE,2BACEW,KAAK,OACLC,MAAOJ,EACPK,SAAU,SAAAC,GAAC,OAjBS,SAAAF,GACxB,IAAMG,EAAmBd,EAAOW,GAC5BR,EAASW,IACXR,GAAmB,GACnBL,EAAOa,IAEPR,GAAmB,GAErBE,EAAcG,GASKI,CAAkBF,EAAEG,OAAOL,UAE3CN,GAAmB,oDAAsBH,KA8DjCe,MAzDf,WACE,IADmB,EAIeb,mBAChCb,EAJyB,OADR,mBAIZ2B,EAJY,KAIDC,EAJC,OAOuBf,mBALrB,UAFF,mBAOZgB,EAPY,KAOGC,EAPH,KASnB,OACE,kBAAC,WAAD,KACE,0BAAMC,OAAO,IACX,kBAACzB,EAAD,CACEC,aAZmB,KAanBC,MAAM,eACNC,OAAQuB,IACRtB,OAAQ,SAAAuB,GAAS,OAAIL,EAAa5B,EAAkBiC,KACpDtB,UAAU,OACVC,SAAU,SAAAqB,GAAS,MAAkB,KAAdA,KAEzB,kBAAC3B,EAAD,CACEC,aAnBa,SAoBbC,MAAM,iBACNC,OAAQyB,IACRxB,OAAQ,SAAAyB,GAAU,OAAIL,EAAiBK,EAAWC,OAClDzB,UAAU,QACVC,SAAU,SAAAuB,GAAU,OAAKA,EAAWE,UAGxC,8BACE,4BACGV,EAAUW,KAAI,SAAAC,GAAY,OACzB,wBAAIC,IAAKD,EAAa3C,UAAW2C,EAAa3C,cAGlD,4BACG+B,EAAUW,KAAI,SAAAC,GAAY,OACzB,wBAAIC,IAAKD,EAAa3C,UACpB,4BACG2C,EAAalC,MAAMiC,KAAI,SAAAG,GAAI,OAC1B,wBACED,IAAKC,EACLC,UAAWC,IAAW,CACpBC,SAAUV,YAAML,GAAegB,MAAMC,SAASL,MAE/CA,eC1ENM,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93262245.chunk.js","sourcesContent":["import * as R from 'ramda'\nimport { enharmonic, transposeFrom } from '@tonaljs/note'\nimport { transpose } from '@tonaljs/tonal'\n\nconst fretIntervals = [\n  'm2',\n  'M2',\n  'm3',\n  'M3',\n  'P4',\n  'd5',\n  'P5',\n  'm6',\n  'M6',\n  'm7',\n  'M7',\n  'P8'\n]\n\nexport const generateString = flatNote =>\n  R.map(R.pipe(transposeFrom(flatNote), enharmonic), fretIntervals)\n\nexport const generateStringsFromDeepestNote = (\n  flatNote,\n  stringCount = 6,\n  acc = []\n) =>\n  stringCount > 0\n    ? generateStringsFromDeepestNote(\n        transpose(flatNote, 'P5'),\n        stringCount - 1,\n        [flatNote, ...acc]\n      )\n    : acc\n\nexport const generateFretboard = R.memoizeWith(\n  R.identity,\n  R.pipe(\n    generateStringsFromDeepestNote,\n    R.map(flatNote => ({\n      flatNote,\n      frets: generateString(flatNote)\n    }))\n  )\n)\n","import React, { Fragment, useState } from 'react'\nimport { simplify } from '@tonaljs/note'\nimport { chord } from '@tonaljs/chord'\nimport classNames from 'classnames'\nimport { generateFretboard } from './generators'\nimport './Fretboard.css'\n\nfunction TonalInput({\n  initialValue,\n  label,\n  getter,\n  setter,\n  tonalType,\n  validate\n}) {\n  const [tonalInputError, setTonalInputError] = useState(false)\n  const [tonalValue, setTonalValue] = useState(initialValue)\n  const handleValueChange = value => {\n    const wantedTonalValue = getter(value)\n    if (validate(wantedTonalValue)) {\n      setTonalInputError(false)\n      setter(wantedTonalValue)\n    } else {\n      setTonalInputError(true)\n    }\n    setTonalValue(value)\n  }\n\n  return (\n    <label htmlFor={label}>\n      {`${label} : `}\n      <input\n        type=\"text\"\n        value={tonalValue}\n        onChange={e => handleValueChange(e.target.value)}\n      />\n      {tonalInputError && <span>{`not a valid ${tonalType}`}</span>}\n    </label>\n  )\n}\n\nfunction Fretboard() {\n  const initialDeepestNote = 'F1'\n  const initialChord = 'C3maj7'\n\n  const [fretboard, setFretboard] = useState(\n    generateFretboard(initialDeepestNote)\n  )\n  const [selectedChord, setSelectedChord] = useState(initialChord)\n\n  return (\n    <Fragment>\n      <form action=\"\">\n        <TonalInput\n          initialValue={initialDeepestNote}\n          label=\"Deepest note\"\n          getter={simplify}\n          setter={noteValue => setFretboard(generateFretboard(noteValue))}\n          tonalType=\"note\"\n          validate={noteValue => noteValue !== ''}\n        />\n        <TonalInput\n          initialValue={initialChord}\n          label=\"Selected Chord\"\n          getter={chord}\n          setter={chordValue => setSelectedChord(chordValue.name)}\n          tonalType=\"chord\"\n          validate={chordValue => !chordValue.empty}\n        />\n      </form>\n      <main>\n        <ol>\n          {fretboard.map(guitarString => (\n            <li key={guitarString.flatNote}>{guitarString.flatNote}</li>\n          ))}\n        </ol>\n        <ol>\n          {fretboard.map(guitarString => (\n            <li key={guitarString.flatNote}>\n              <ol>\n                {guitarString.frets.map(fret => (\n                  <li\n                    key={fret}\n                    className={classNames({\n                      selected: chord(selectedChord).notes.includes(fret)\n                    })}>\n                    {fret}\n                  </li>\n                ))}\n              </ol>\n            </li>\n          ))}\n        </ol>\n      </main>\n    </Fragment>\n  )\n}\n\nexport default Fretboard\n","import React from 'react'\nimport './App.css'\nimport Fretboard from './Fretboard'\n\nfunction App() {\n  return (\n    <div>\n      <Fretboard />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}